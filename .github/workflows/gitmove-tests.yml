name: GitMove Tests and Deployment

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  # release:
  #   types: [ published ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Récupérer tout l'historique pour les tests Git

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Test with tox
      run: tox

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black flake8 isort mypy

    - name: Check formatting with Black
      run: black --check src tests

    - name: Check imports with isort
      run: isort --check-only --profile black src tests

    - name: Lint with flake8
      run: flake8 src tests

    - name: Type check with mypy
      run: mypy src

  build:
    name: Build Package
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload package artifact
      uses: actions/upload-artifact@v3
      with:
        name: gitmove-package
        path: dist/
        retention-days: 5

  # publish-test:
  #   name: Publish to TestPyPI
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

  #   steps:
  #   - name: Download package artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: gitmove-package
  #       path: dist/

  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'

  #   - name: Install Twine
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install twine

  #   - name: Publish to TestPyPI
  #     env:
  #       TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
  #       TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
  #     run: |
  #       twine upload --repository-url https://test.pypi.org/legacy/ dist/*

  # publish-prod:
  #   name: Publish to PyPI
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release' && github.event.action == 'published'

  #   steps:
  #   - name: Download package artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: gitmove-package
  #       path: dist/

  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'

  #   - name: Install Twine
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install twine

  #   - name: Publish to PyPI
  #     env:
  #       TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     run: |
  #       twine upload dist/*

  docker:
    name: Build and Push Docker Image
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max