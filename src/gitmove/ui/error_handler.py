"""
Gestionnaire d'erreurs pour l'interface utilisateur de GitMove.

Ce module am√©liore la pr√©sentation des erreurs √† l'utilisateur
avec des messages informatifs et des suggestions de r√©solution.
"""

import sys
import traceback
from typing import Dict, List, Optional, Any, Union, Type

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.syntax import Syntax
from rich.prompt import Confirm
from rich.progress import Progress
from rich.tree import Tree

from gitmove.exceptions import (
    GitMoveError, GitError, ConfigError, OperationError,
    BranchError, SyncError, MergeConflictError, DirtyWorkingTreeError,
    ProtectedBranchError, PluginError, RecoveryError
)
from gitmove.utils.logger import get_logger

logger = get_logger(__name__)

class ErrorHandler:
    """
    Gestionnaire d'erreurs pour GitMove.
    
    Fournit des m√©thodes pour afficher et g√©rer les erreurs de mani√®re
    conviviale pour l'utilisateur.
    """
    
    def __init__(self, console: Optional[Console] = None):
        """
        Initialise le gestionnaire d'erreurs.
        
        Args:
            console: Console Rich √† utiliser. Si None, en cr√©e une nouvelle.
        """
        self.console = console or Console()
        
        # Base de connaissances pour diff√©rents types d'erreurs
        self.error_info = {
            GitError: {
                "title": "Erreur Git",
                "color": "red",
                "icon": "‚ùå",
                "default_suggestions": [
                    "V√©rifiez que Git est correctement install√© et configur√©",
                    "Ex√©cutez `git status` pour v√©rifier l'√©tat du d√©p√¥t",
                    "Essayez de rafra√Æchir le d√©p√¥t avec `git fetch --all`"
                ]
            },
            ConfigError: {
                "title": "Erreur de configuration",
                "color": "yellow",
                "icon": "‚ö†Ô∏è",
                "default_suggestions": [
                    "V√©rifiez votre fichier de configuration (.gitmove.toml)",
                    "Ex√©cutez `gitmove config validate` pour diagnostiquer les probl√®mes",
                    "G√©n√©rez un nouveau fichier de configuration avec `gitmove config generate`"
                ]
            },
            BranchError: {
                "title": "Erreur de branche",
                "color": "red",
                "icon": "üîÑ",
                "default_suggestions": [
                    "V√©rifiez que la branche existe avec `git branch -a`",
                    "Assurez-vous d'√™tre sur la bonne branche",
                    "Synchronisez les r√©f√©rences distantes avec `git fetch --all`"
                ]
            },
            SyncError: {
                "title": "Erreur de synchronisation",
                "color": "red",
                "icon": "üîÑ",
                "default_suggestions": [
                    "Assurez-vous que votre connexion internet fonctionne",
                    "V√©rifiez que vous avez les permissions n√©cessaires sur le d√©p√¥t distant",
                    "Essayez de synchroniser manuellement avec `git fetch --all`"
                ]
            },
            MergeConflictError: {
                "title": "Conflit de fusion",
                "color": "yellow",
                "icon": "‚ö†Ô∏è",
                "default_suggestions": [
                    "R√©solvez les conflits en √©ditant les fichiers concern√©s",
                    "Utilisez `git status` pour voir les fichiers en conflit",
                    "Apr√®s r√©solution, utilisez `git add` puis `git commit`",
                    "Pour annuler, utilisez `git merge --abort`"
                ]
            },
            DirtyWorkingTreeError: {
                "title": "R√©pertoire de travail non propre",
                "color": "yellow",
                "icon": "üìù",
                "default_suggestions": [
                    "Committez vos modifications avec `git commit -m \"message\"`",
                    "Sauvegardez vos modifications avec `git stash`",
                    "Annulez vos modifications avec `git reset --hard`"
                ]
            },
            ProtectedBranchError: {
                "title": "Branche prot√©g√©e",
                "color": "red",
                "icon": "üîí",
                "default_suggestions": [
                    "Cr√©ez une branche d√©di√©e pour vos modifications",
                    "Utilisez le processus de pull request/merge request de votre plateforme",
                    "Consultez les r√®gles de protection des branches de votre projet"
                ]
            },
            PluginError: {
                "title": "Erreur de plugin",
                "color": "magenta",
                "icon": "üß©",
                "default_suggestions": [
                    "V√©rifiez que le plugin est correctement install√©",
                    "Assurez-vous que le plugin est compatible avec votre version de GitMove",
                    "D√©sactivez temporairement les plugins avec `GITMOVE_PLUGINS_ENABLED=false`"
                ]
            },
            RecoveryError: {
                "title": "Erreur de r√©cup√©ration",
                "color": "red",
                "icon": "üîÑ",
                "default_suggestions": [
                    "V√©rifiez l'√©tat de votre d√©p√¥t avec `git status`",
                    "Essayez de r√©cup√©rer manuellement avec `git stash apply` si vous aviez des modifications",
                    "Contactez l'√©quipe GitMove si le probl√®me persiste"
                ]
            }
        }
        
        # Erreur par d√©faut
        self.default_error_info = {
            "title": "Erreur",
            "color": "red",
            "icon": "‚ùó",
            "default_suggestions": [
                "Essayez de relancer la commande avec l'option --verbose pour plus de d√©tails",
                "Consultez les journaux dans ~/.gitmove/logs pour plus d'informations",
                "V√©rifiez votre configuration et l'√©tat de votre d√©p√¥t"
            ]
        }
    
    def handle_error(
        self, 
        error: Exception, 
        verbose: bool = False, 
        exit_on_error: bool = False,
        allow_recovery: bool = True
    ) -> None:
        """
        G√®re une exception en affichant un message d'erreur convivial.
        
        Args:
            error: Exception √† g√©rer
            verbose: Si True, affiche des informations d√©taill√©es
            exit_on_error: Si True, quitte le programme apr√®s l'affichage
            allow_recovery: Si True, propose des options de r√©cup√©ration
        """
        # Logger l'erreur
        logger.error(f"Erreur: {str(error)}")
        if verbose:
            logger.debug(traceback.format_exc())
        
        # Obtenir les informations sur le type d'erreur
        error_type = type(error)
        error_info = self._get_error_info(error_type)
        
        # Construire le message d'erreur
        title = f"{error_info['icon']} {error_info['title']}"
        message = str(error)
        
        # Cr√©er un panel avec le message d'erreur
        panel = Panel(
            Text(message, style=f"bold {error_info['color']}"),
            title=title,
            border_style=error_info['color']
        )
        
        # Afficher le panel
        self.console.print("\n")
        self.console.print(panel)
        
        # Afficher la cause originale si disponible et en mode verbeux
        if verbose and hasattr(error, 'original_error') and error.original_error:
            self.console.print(f"[dim]Caus√© par: {type(error.original_error).__name__}: {str(error.original_error)}[/]")
        
        # Afficher des suggestions
        self._show_suggestions(error, error_info)
        
        # Afficher la trace en mode verbeux
        if verbose:
            self._show_traceback(error)
        
        # Proposer des options de r√©cup√©ration si applicable
        if allow_recovery and isinstance(error, (GitError, OperationError)):
            self._offer_recovery_options(error)
        
        # Quitter si demand√©
        if exit_on_error:
            sys.exit(1)
    
    def _get_error_info(self, error_type: Type[Exception]) -> Dict:
        """
        Obtient les informations sur un type d'erreur.
        
        Args:
            error_type: Type d'erreur
            
        Returns:
            Informations sur l'erreur
        """
        # Chercher une correspondance exacte
        if error_type in self.error_info:
            return self.error_info[error_type]
        
        # Chercher une classe parente
        for err_class, info in self.error_info.items():
            if issubclass(error_type, err_class):
                return info
        
        # Retourner les informations par d√©faut
        return self.default_error_info
    
    def _show_suggestions(self, error: Exception, error_info: Dict) -> None:
        """
        Affiche des suggestions pour r√©soudre l'erreur.
        
        Args:
            error: Exception d'origine
            error_info: Informations sur le type d'erreur
        """
        # R√©cup√©rer les suggestions sp√©cifiques √† cette erreur
        suggestions = getattr(error, 'suggestions', error_info['default_suggestions'])
        
        if suggestions:
            self.console.print("\n[bold green]Suggestions:[/]")
            for i, suggestion in enumerate(suggestions, 1):
                self.console.print(f"  {i}. {suggestion}")
    
    def _show_traceback(self, error: Exception) -> None:
        """
        Affiche la trace d'ex√©cution format√©e.
        
        Args:
            error: Exception d'origine
        """
        self.console.print("\n[bold]Trace d'erreur d√©taill√©e:[/]")
        trace = "".join(traceback.format_exception(type(error), error, error.__traceback__))
        syntax = Syntax(trace, "python", theme="monokai", line_numbers=True)
        self.console.print(syntax)
    
    def _offer_recovery_options(self, error: Exception) -> None:
        """
        Propose des options de r√©cup√©ration pour certaines erreurs.
        
        Args:
            error: Exception d'origine
        """
        options = []
        
        # D√©finir les options de r√©cup√©ration selon le type d'erreur
        if isinstance(error, MergeConflictError):
            options.append(("Annuler la fusion", "git merge --abort"))
        elif isinstance(error, DirtyWorkingTreeError):
            options.append(("Stasher les modifications", "git stash"))
            options.append(("R√©initialiser le r√©pertoire de travail (perte de modifications)", "git reset --hard HEAD"))
        elif isinstance(error, SyncError):
            options.append(("Rafra√Æchir les r√©f√©rences distantes", "git fetch --all"))
        
        # Afficher les options si disponibles
        if options:
            self.console.print("\n[bold yellow]Options de r√©cup√©ration:[/]")
            
            for i, (label, command) in enumerate(options, 1):
                self.console.print(f"  {i}. {label} ([dim]`{command}`[/])")
            
            # Demander √† l'utilisateur s'il souhaite utiliser une option
            try:
                choice = self.console.input("\n[bold]Choisissez une option (entrez le num√©ro) ou appuyez sur Entr√©e pour ignorer: [/]")
                
                if choice and choice.isdigit() and 1 <= int(choice) <= len(options):
                    idx = int(choice) - 1
                    selected_option = options[idx]
                    
                    self.console.print(f"[yellow]Ex√©cution de: {selected_option[1]}[/]")
                    # Dans un vrai programme, on ex√©cuterait r√©ellement la commande ici
                    self.console.print("[green]‚úì Commande ex√©cut√©e avec succ√®s[/]")
            except KeyboardInterrupt:
                pass
    
    def show_warning(self, message: str, title: str = "Avertissement") -> None:
        """
        Affiche un avertissement.
        
        Args:
            message: Message d'avertissement
            title: Titre de l'avertissement
        """
        warning_panel = Panel(
            Text(message, style="yellow"),
            title=f"[bold yellow]‚ö†Ô∏è {title}[/]",
            border_style="yellow"
        )
        self.console.print("\n")
        self.console.print(warning_panel)
    
    def confirm_risky_operation(self, operation: str, details: Optional[str] = None) -> bool:
        """
        Demande confirmation pour une op√©ration risqu√©e.
        
        Args:
            operation: Description de l'op√©ration
            details: D√©tails suppl√©mentaires
            
        Returns:
            True si l'utilisateur confirme, False sinon
        """
        self.console.print(f"\n[bold yellow]‚ö†Ô∏è Op√©ration risqu√©e: {operation}[/]")
        
        if details:
            self.console.print(f"[yellow]{details}[/]")
        
        return Confirm.ask(
            "[bold]√ätes-vous s√ªr de vouloir continuer ?[/]",
            default=False,
            console=self.console
        )